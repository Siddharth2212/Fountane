import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';
import {addPost, filterPosts, getPosts} from '../../api/apiCall';

const initialState = {
  posts: [],
  postsFromSearch: [],
  status: 'idle',
  error: null,
};

// Add redux thunk to retrieve/filter lists of posts
export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {
  const response = await getPosts();
  return response;
});

// Add redux thunk to retrieve/filter lists of posts
export const filterFetchedPosts = createAsyncThunk(
  'posts/fetchPosts',
  async searchQuery => {
    const response = await filterPosts(searchQuery);
    return response;
  },
);

// Add redux thunk to create a post
export const addNewPost = createAsyncThunk(
  'posts/addNewPost',
  async initialPost => {
    const response = await addPost({post: initialPost});
    return response;
  },
);

const postsSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {},
  extraReducers: {
    [fetchPosts.pending]: (state, action) => {
      // Called if fetchPosts thunk dispatches "pending" action type
      state.status = 'loading';
    },
    [fetchPosts.fulfilled]: (state, action) => {
      // Called if fetchPosts thunk dispatches "fulfilled" action type
      state.status = 'succeeded';
      // Add any fetched posts to the array
      state.posts = state.posts.concat(action.payload);
    },
    [fetchPosts.rejected]: (state, action) => {
      // Called if fetchPosts thunk dispatches "rejected" action type
      state.status = 'failed';
      state.error = action.error.message;
    },
    [filterFetchedPosts.pending]: (state, action) => {
      // Called if filterFetchedPosts thunk dispatches "pending" action type
      state.status = 'loading';
    },
    [filterFetchedPosts.fulfilled]: (state, action) => {
      // Called if filterFetchedPosts thunk dispatches "fulfilled" action type
      state.status = 'succeeded';
      // Add any filtered posts to the array
      state.postsFromSearch = action.payload;
    },
    [filterFetchedPosts.rejected]: (state, action) => {
      // Called if filterFetchedPosts thunk dispatches "rejected" action type
      state.status = 'failed';
      state.error = action.error.message;
    },
    [addNewPost.fulfilled]: (state, action) => {
      // Called if addNewPost thunk dispatches "fulfilled" action type
      state.posts.push(action.payload);
    },
  },
});

// Export action creators generated by createSlice function
export const {postAdded, postUpdated, reactionAdded} = postsSlice.actions;

export default postsSlice.reducer;

// Export selector function to components to extract posts data
export const selectAllPosts = state => state.posts.posts;

// Export selector function to components to filter posts data
export const selectFilteredPosts = state => state.posts.postsFromSearch;
